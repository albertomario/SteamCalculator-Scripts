#!/usr/bin/perl -w
#
#   $Id: getGames 3 2010-03-02 16:56:48Z alex@steamcalculator.com $
#
#   SteamCalculator Scripts - http://www.steamcalculator.com
#   Copyright (C) 2010 Alexander Kuhrt (alex@steamcalculator.com)
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

require 5.8.0;

use strict;
use DBI;
use LWP::Simple;
use POSIX qw(ceil strftime);
use Time::HiRes;
use IO::Handle;
use Getopt::Long;
binmode(STDOUT, ":utf8");

# Print usage of getGames
sub printUsage()
{
  printf STDOUT ("Usage: getGames [OPTIONS]\n");
  printf STDOUT ("Grabs all games form Valve's Steam store\n\n");
  printf STDOUT ("Options:\n");
  printf STDOUT ("  \t--clear\t\tClear database\n");
  printf STDOUT ("  -d\t--debug\t\tCreate debug.log\n");
  printf STDOUT ("  -h\t--help\t\tShow this help\n");
  printf STDOUT ("  -o\t--output-file <file> Redirect output to file\n");
  printf STDOUT ("  -q\t--quiet\t\tSuppress output\n");
  printf STDOUT ("  \t--version\tShow current version\n");
  exit(1);
}

# Print information about getGames
sub printVersion()
{
  printf STDOUT ("getGames 0.3.3\n");
  printf STDOUT ("Copyright (C) 2010 Free Software Foundation, Inc.\n");
  printf STDOUT ("License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.\n");
  printf STDOUT ("This is free software: you are free to change and redistribute it.\n");
  printf STDOUT ("There is NO WARRANTY, to the extent permitted by law.\n\n");
  printf STDOUT ("Written by Alexander Kuhrt.\n");
  exit(1);
}

# Suppress output
sub printQuiet($)
{
  my $outputFile = shift;

  if($outputFile ne 0)
  {
    # redirect STDOUT to $outputFile
    open(OUTPUTFILE, ">", $outputFile) or die $!;
    STDOUT->fdopen(\*OUTPUTFILE, "w") or die $!;
  }
  else
  {
    # Linux, Mac
    if($^O !~ m/Win32/i)
    {
      # redirect STDOUT to /dev/null
      open(DEVNULL, ">", "/dev/null") or die $!;
      STDOUT->fdopen(\*DEVNULL, 'w') or die $!;
    }
    # Windows
    else
    {
      # TOOD: anyone?
    }
  }
}

# Declare options
my $clear = 0;
my $debug = 0;
my $help = 0;
my $outputFile = 0;
my $quiet = 0;
my $version = 0;

my @options = (
    "clear" => \$clear,
    "d|debug" => \$debug,
    "h|help|?" => \$help,
    "o|output-file=s" => \$outputFile,
    "q|quiet" => \$quiet,
    "version" => \$version
);

# Grab options
GetOptions(@options) or exit(1);

# Test options
printUsage() if $help;
printVersion() if $version;
printQuiet($outputFile) if $quiet || $outputFile;

open ERROR,  '>', "error.txt"  or die $!;
STDERR->fdopen( \*ERROR,  'w' ) or die $!;

# Include stuff
require "./include/Simple.pm";
do "./include/functions.plib";

my $configFile = "./include/config.ini";


my @countries = ('at', 'au', 'de', 'no', 'pl', 'uk', 'us');
my $start = [Time::HiRes::gettimeofday()];
my $db_host;
my $db_user;
my $db_pass;
my $db_name;

logging("Staring SteamCalculator's 'getGames' Script...\n");
logging("Reading config file... ");

# read config file
if($configFile && -r $configFile)
{
    printf("[OK]\n");

    my $conf = ConfigReader::Simple->new($configFile);
    $conf->parse();

    $db_host = $conf->get("DBHostname");
    $db_user = $conf->get("DBUsername");
    $db_pass = $conf->get("DBPassword");
    $db_name = $conf->get("DBName");
}
else
{
    printf("[FAILED]");
    die("-- Warning: unable to open configuration file '$configFile'\n");
}

logging("Connecting to MySQL database '$db_name' on '$db_host' as user '$db_user'... ");

my $db = DBI->connect("DBI:mysql:$db_name:$db_host", $db_user, $db_pass) or die("\nCan't connect to MySQL database '$db_name' on '$db_host'\nServer error: $DBI::errstr\n");

printf("connected [OK]\n");

# Clear database befor fillig it again
if($clear)
{
    logging("Cleaning MySQL database\n");

    my $query = "TRUNCATE TABLE `sc_steamgames`";
    my $stmt = $db->prepare($query);
    $stmt->execute() or die $!;

    $query = "TRUNCATE TABLE `sc_steamgameprices";
    $stmt = $db->prepare($query);
    $stmt->execute();
}


printf("Elapsed time: ".Time::HiRes::tv_interval($start)."seconds\n");
